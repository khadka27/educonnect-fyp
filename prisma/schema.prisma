// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   USER
//   ADMIN
//   TEACHER
// }

// model User {
//   id               String        @id @default(cuid())
//   name             String?
//   username         String?       @unique
//   email            String?       @unique
//   password         String?
//   bio              String?
//   address          String?
//   coverImage       String?
//   profileImage     String?
//   verifyCode       String?
//   verifyCodeExpiry DateTime?
//   isVerified       Boolean       @default(false)
//   role             Role          @default(USER)
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt
//   // messages         Message[]   @relation
//   posts            Post[] // Removed @relation(onDelete: Cascade)
//   reactions        Reaction[]    @relation
//   shares           Share[]       @relation
//   savedPosts       SavedPost[]   @relation
//   comments         Comment[]     @relation
//   //-----------------------------------------chat schema-----------------------------------------
//   messages         Message[]     @relation("SentMessages")
//   receivedMessages Message[]     @relation("ReceivedMessages")
//   groupMemberships GroupMember[] @relation
//   groupAdmin       Group[]       @relation("GroupAdmin")

//   events Event[] @relation("UserEvents")
// }

// model Post {
//   id        String      @id @default(cuid())
//   content   String
//   postUrl   String?
//   createdAt DateTime    @default(now())
//   userId    String
//   user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   reactions Reaction[]  @relation
//   shares    Share[]     @relation
//   savedBy   SavedPost[] @relation
//   comments  Comment[]   @relation
// }

// model Reaction {
//   id        String   @id @default(cuid())
//   type      String // Changed to String to handle different reaction types like 'like'
//   createdAt DateTime @default(now())
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([postId, userId, type]) // Ensure that a user can only have one reaction per post type
// }

// model Share {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// model SavedPost {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

//   @@unique([userId, postId]) // Ensure that a user can only save a post once
// }

// // model Message {
// //   id        String   @id @default(cuid())
// //   content   String
// //   createdAt DateTime @default(now())
// //   userId    String
// //   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// // }

// model Comment {
//   id        String   @id @default(cuid())
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

// //-----------------------------------------chat schema-----------------------------------------

// // model Message {
// //   id            String   @id @default(cuid())
// //   content       String
// //   createdAt     DateTime @default(now())
// //   isRead        Boolean  @default(false)
// //   isGroupMessage Boolean @default(false)

// //   senderId      String
// //   sender        User     @relation("SentMessages", fields: [senderId], references: [id])

// //   receiverId    String?
// //   receiver      User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])

// //   groupId       String?
// //   group         Group?   @relation(fields: [groupId], references: [id])

// //   @@index([senderId])
// //   @@index([receiverId])
// //   @@index([groupId])
// // }

// model Message {
//   id             String   @id @default(cuid())
//   content        String
//   createdAt      DateTime @default(now())
//   isRead         Boolean  @default(false)
//   isGroupMessage Boolean  @default(false)

//   fileUrl   String? // For file, image, video URL
//   fileType  String? // To store type of the file (e.g., 'image', 'video', 'file')
//   expiresAt DateTime @default(dbgenerated("now() + interval '1 day'")) // Auto-delete after 24 hours

//   senderId String
//   sender   User   @relation("SentMessages", fields: [senderId], references: [id])

//   receiverId String?
//   receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])

//   groupId String?
//   group   Group?  @relation(fields: [groupId], references: [id])

//   @@index([senderId])
//   @@index([receiverId])
//   @@index([groupId])
//   @@index([expiresAt])
// }

// model Group {
//   id        String        @id @default(cuid())
//   name      String
//   adminId   String
//   admin     User          @relation("GroupAdmin", fields: [adminId], references: [id])
//   members   GroupMember[]
//   createdAt DateTime      @default(now())
//   updatedAt DateTime      @updatedAt

//   messages Message[]
// }

// model GroupMember {
//   userId  String
//   user    User   @relation(fields: [userId], references: [id])
//   groupId String
//   group   Group  @relation(fields: [groupId], references: [id])

//   @@id([userId, groupId])
// }

// //-----------------------------------events schema-----------------------------------

// model Event {
//   id          String         @id @default(cuid())
//   title       String
//   description String?
//   date        DateTime
//   location    String
//   type        String      // 'free' or 'premium'
//   bannerUrl   String?
//   contactEmail String
//   contactPhone String
//   registrations Registration[]
// }

// model Registration {
//   id        String      @id @default(cuid())
//   name      String
//   email     String
//   phone     String
//   eventId   String
//   event     Event    @relation(fields: [eventId], references: [id])
//   eventType String   // free or premium
//   createdAt DateTime @default(now())
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

model User {
  id               String        @id @default(cuid())
  name             String?
  username         String?       @unique
  email            String?       @unique
  password         String?
  bio              String?
  address          String?
  coverImage       String?
  profileImage     String?
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean       @default(false)
  role             Role          @default(USER)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  posts            Post[] // Removed @relation(onDelete: Cascade)
  reactions        Reaction[]    @relation
  savedPosts       SavedPost[]   @relation
  comments         Comment[]     @relation
  messages         Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  groupMemberships GroupMember[] @relation
  groupAdmin       Group[]       @relation("GroupAdmin")
  events           Event[]       @relation("UserEvents")
  payments         Payment[] // Relation to Payment model
}

model Post {
  id        String      @id @default(cuid())
  content   String
  postUrl   String?
  createdAt DateTime    @default(now())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]  @relation
  savedBy   SavedPost[] @relation
  comments  Comment[]   @relation
}

model Reaction {
  id        String   @id @default(cuid())
  type      String // Changed to String to handle different reaction types like 'like'
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type]) // Ensure that a user can only have one reaction per post type
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure that a user can only save a post once
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

//-----------------------------------------chat schema-----------------------------------------

model Message {
  id             String   @id @default(cuid())
  content        String
  createdAt      DateTime @default(now())
  isRead         Boolean  @default(false)
  isGroupMessage Boolean  @default(false)

  fileUrl   String? // For file, image, video URL
  fileType  String? // To store type of the file (e.g., 'image', 'video', 'file')
  expiresAt DateTime @default(dbgenerated("now() + interval '1 day'")) // Auto-delete after 24 hours

  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id])

  receiverId String?
  receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([groupId])
  @@index([expiresAt])
}

model Group {
  id        String        @id @default(cuid())
  name      String
  adminId   String
  admin     User          @relation("GroupAdmin", fields: [adminId], references: [id])
  members   GroupMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  messages Message[]
}

model GroupMember {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

//-----------------------------------events schema-----------------------------------

model Event {
  id                  String         @id @default(cuid())
  title               String
  description         String?
  date                DateTime // Event date
  startTime           DateTime? // Event start time
  registrationEndDate DateTime? // Last date for registration
  location            String
  type                String // 'free' or 'premium'
  bannerUrl           String?
  contactEmail        String
  contactPhone        String
  price               Float? // Event price (if premium)
  discountPercentage  Float? // Discount percentage (optional)
  registrations       Registration[] // Linked to registration model

  userId   String
  user     User      @relation("UserEvents", fields: [userId], references: [id], onDelete: Cascade) // Cascade delete on user deletion
  payments Payment[] // Relation to Payment model
}

model Registration {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventType     String // free or premium
  paymentStatus String? // pending, completed, failed
  transactionId String? // Optional field for storing transaction IDs
  createdAt     DateTime @default(now())
}

model Payment {
  id             String   @id @default(cuid())
  transactionId  String   @unique
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId        String
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  amount         Float
  status         String
  method         String
  paymentGateway String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  failureReason  String?
}
