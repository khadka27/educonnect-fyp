generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
  TEACHER
}
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
enum PaymentMethod {
  ESEWA
  KHALTI
}
enum PaymentGateway {
  ESEWA
  KHALTI
}
enum EventType {
  FREE
  PREMIUM
}
model User {
  id               String         @id @default(cuid())
  name             String?
  username         String?        @unique
  email            String?        @unique
  password         String
  bio              String?
  address          String?
  coverImage       String?
  profileImage     String?
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean        @default(false)
  role             Role           @default(USER)
  lastSeen         DateTime? // Added for tracking user's last activity
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  posts            Post[]
  reactions        Reaction[]
  savedPosts       SavedPost[]
  comments         Comment[]
  messages         Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  groupMemberships GroupMember[]
  groupAdmin       Group[]        @relation("GroupAdmin")
  events           Event[]        @relation("UserEvents")
  payments         Payment[]
  books            Book[]
  articles         Article[]
  Notification     Notification[]
}
model Event {
  id                  String         @id @default(cuid())
  title               String
  description         String?
  date                DateTime
  startTime           DateTime?
  registrationEndDate DateTime?
  location            String
  type                EventType
  bannerUrl           String?
  contactEmail        String
  contactPhone        String
  price               Float?
  discountPercentage  Float?
  registrations       Registration[]
  userId              String
  user                User           @relation("UserEvents", fields: [userId], references: [id], onDelete: Cascade)
  payments            Payment[]
}
model Registration {
  id            String         @id @default(cuid())
  name          String
  email         String
  phone         String
  eventId       String
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventType     EventType
  paymentStatus PaymentStatus?
  transactionId String?
  createdAt     DateTime       @default(now())
}
model Payment {
  id             String         @id @default(cuid())
  transactionId  String         @unique
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId        String
  event          Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  amount         Float
  status         PaymentStatus
  method         PaymentMethod
  paymentGateway PaymentGateway
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  failureReason  String?
}
model Post {
  id            String      @id @default(cuid())
  content       String
  postUrl       String?
  savesCount    Int         @default(0)
  likesCount    Int         @default(0)
  commentsCount Int         @default(0)
  tags          String[]    @default([])
  createdAt     DateTime    @default(now())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions     Reaction[]
  savedBy       SavedPost[]
  comments      Comment[]
}
model Reaction {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

//----------------------------------------- Chat Schema -----------------------------------------

model Message {
  id             String   @id @default(cuid())
  content        String? // Made optional for messages that only include files
  createdAt      DateTime @default(now())
  isRead         Boolean  @default(false)
  isDelivered    Boolean  @default(false) // Added for tracking message delivery status
  isGroupMessage Boolean  @default(false)
  fileUrl        String?
  fileType       String?
  fileName       String? // Optional field to store the original file name
  expiresAt      DateTime @default(dbgenerated("now() + interval '1 day'"))

  // Sender relation
  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id])

  // Receiver for private messages (optional if itâ€™s a group message)
  receiverId String?
  receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  // Group relation for group messages
  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([groupId])
  @@index([expiresAt])
}

model Group {
  id      String @id @default(cuid())
  name    String
  adminId String
  admin   User   @relation("GroupAdmin", fields: [adminId], references: [id])

  // Members of the group
  members GroupMember[]

  // Messages in the group
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  // Composite primary key to avoid duplicate memberships
  @@id([userId, groupId])
}

//Sample data
model GroupMemberDemo {
  groupMemberId String @id @default(cuid())
}

//e-learning 

model Book {
  id            String   @id @default(uuid())
  title         String
  author        String
  description   String?  @db.Text
  imageUrl      String?
  fileUrl       String?
  isbn          String?
  category      String?
  publishedYear Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation(fields: [userId], references: [id])
  userId        String
}
model Article {
  id        String   @id @default(uuid())
  title     String
  abstract  String?  @db.Text
  content   String   @db.Text
  imageUrl  String?
  fileUrl   String?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
}
model Notification {
  id        String   @id @default(cuid())
  userId    String // The user who will receive the notification
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String // Notification message
  isRead    Boolean  @default(false) // Whether the notification has been read
  createdAt DateTime @default(now())
}
