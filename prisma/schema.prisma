generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

model User {
  id               String      @id @default(cuid())
  name             String?
  username         String?     @unique
  email            String?     @unique
  password         String?
  bio              String?
  address          String?
  coverImage       String?
  profileImage     String?
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean     @default(false)
  role             Role        @default(USER)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  messages         Message[]   @relation
  posts            Post[] // Removed @relation(onDelete: Cascade)
  reactions        Reaction[]  @relation
  shares           Share[]     @relation
  savedPosts       SavedPost[] @relation
  comments         Comment[]   @relation
}

model Post {
  id        String      @id @default(cuid())
  content   String
  postUrl   String?
  createdAt DateTime    @default(now())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]  @relation
  shares    Share[]     @relation
  savedBy   SavedPost[] @relation
  comments  Comment[]   @relation
}

model Reaction {
  id        String   @id @default(cuid())
  type      String // Changed to String to handle different reaction types like 'like'
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type]) // Ensure that a user can only have one reaction per post type
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
