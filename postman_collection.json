{
  "info": {
    "name": "EduConnect API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Signup",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "signup"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test{{$timestamp}}@example.com\",\n    \"password\": \"password123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('name');",
                  "    ",
                  "    // Store user ID for later tests",
                  "    pm.environment.set(\"user_id\", jsonData.user.id);",
                  "    pm.environment.set(\"user_email\", jsonData.user.email);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"password123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"wrongpassword\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.equal('Invalid credentials');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "Create Article",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/articles",
              "host": ["{{base_url}}"],
              "path": ["api", "articles"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Article {{$timestamp}}\",\n    \"content\": \"This is a test article created by Postman.\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has article data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('authorId');",
                  "    ",
                  "    // Store article ID for later tests",
                  "    pm.environment.set(\"article_id\", jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Articles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/articles",
              "host": ["{{base_url}}"],
              "path": ["api", "articles"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Article",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/articles",
              "host": ["{{base_url}}"],
              "path": ["api", "articles"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{article_id}}\",\n    \"title\": \"Updated Test Article\",\n    \"content\": \"This article has been updated via Postman tests.\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Article was updated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.equal(pm.environment.get(\"article_id\"));",
                  "    pm.expect(jsonData.title).to.equal(\"Updated Test Article\");",
                  "    pm.expect(jsonData.content).to.include(\"updated via Postman\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/articles?id={{article_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "articles"],
              "query": [
                {
                  "key": "id",
                  "value": "{{article_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Create Comment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This is a test comment\",\n    \"articleId\": \"{{article_id}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has comment data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('articleId');",
                  "    pm.expect(jsonData).to.have.property('authorId');",
                  "    ",
                  "    // Store comment ID for later tests",
                  "    pm.environment.set(\"comment_id\", jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Comments for Article",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/comments?articleId={{article_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"],
              "query": [
                {
                  "key": "articleId",
                  "value": "{{article_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Comment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{comment_id}}\",\n    \"content\": \"This comment has been updated via Postman\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comment was updated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.equal(pm.environment.get(\"comment_id\"));",
                  "    pm.expect(jsonData.content).to.include(\"updated via Postman\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Comment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/comments?id={{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"],
              "query": [
                {
                  "key": "id",
                  "value": "{{comment_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of users\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('email');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Articles (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/articles",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "articles"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of articles\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('title');",
                  "        pm.expect(jsonData[0]).to.have.property('content');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Socket.IO Tests",
      "item": [
        {
          "name": "Join Room",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/socket.io/?EIO=4&transport=websocket",
              "host": ["{{base_url}}"],
              "path": ["socket.io"],
              "query": [
                {
                  "key": "EIO",
                  "value": "4"
                },
                {
                  "key": "transport",
                  "value": "websocket"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\"event\":\"joinRoom\",\"data\":\"{{user_id}}\"}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: Socket.IO testing in Postman is limited",
                  "// These tests are basic connectivity checks",
                  "",
                  "pm.test(\"Request was sent\", function () {",
                  "    pm.expect(pm.response).to.be.not.null;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/socket.io/?EIO=4&transport=websocket",
              "host": ["{{base_url}}"],
              "path": ["socket.io"],
              "query": [
                {
                  "key": "EIO",
                  "value": "4"
                },
                {
                  "key": "transport",
                  "value": "websocket"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\"event\":\"sendMessage\",\"data\":{\"content\":\"Hello, this is a test message {{$timestamp}}\",\"senderId\":\"{{user_id}}\",\"receiverId\":\"receiver-456\",\"groupId\":null}}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: Socket.IO testing in Postman is limited",
                  "// These tests are basic connectivity checks",
                  "",
                  "pm.test(\"Request was sent\", function () {",
                  "    pm.expect(pm.response).to.be.not.null;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Fetch Messages",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/socket.io/?EIO=4&transport=websocket",
              "host": ["{{base_url}}"],
              "path": ["socket.io"],
              "query": [
                {
                  "key": "EIO",
                  "value": "4"
                },
                {
                  "key": "transport",
                  "value": "websocket"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\"event\":\"fetchMessages\",\"data\":{\"senderId\":\"{{user_id}}\",\"receiverId\":\"receiver-456\"}}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: Socket.IO testing in Postman is limited",
                  "// These tests are basic connectivity checks",
                  "",
                  "pm.test(\"Request was sent\", function () {",
                  "    pm.expect(pm.response).to.be.not.null;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "// You can add authentication logic or other setup here"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": ["// Global test script", "// Common assertions can go here"]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}
